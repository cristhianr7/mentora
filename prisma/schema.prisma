generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  courses       Course[]

  @@map("users")
}

enum LANGUAGE {
  Python
  TypeScript
  JavaScript
  CPlusPlus
  Go
  Rust
  CSharp
  Swift
  Ruby
  Kotlin
}

enum LEVEL {
  Trainee
  Junior
  Middle
  Senior
}

enum LEARNING_STYLE {
  Theoretical
  Practical
  Mixed
}

model Course {
  id        String         @id @default(cuid())
  userId    String         @map("user_id")
  language  LANGUAGE
  level     LEVEL
  style     LEARNING_STYLE
  createdAt DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  units Unit[]

  @@map("courses")
}

model Unit {
  id       String @id @default(cuid())
  courseId String @map("course_id")
  title    String
  position Int

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons  Lesson[]
  projects Project[]

  @@map("units")
}

model Lesson {
  id        String  @id @default(cuid())
  unitId    String  @map("unit_id")
  title     String
  position  Int
  completed Boolean @default(false)

  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  quizzes       Quiz[]
  codeExercises CodeExercise[]
  theories      Theory[]

  @@map("lessons")
}

model Project {
  id          String @id @default(cuid())
  unitId      String @map("unit_id")
  title       String
  explanation String @db.Text

  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Quiz {
  id       String @id @default(cuid())
  lessonId String @map("lesson_id")
  title    String
  position Int

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  answers Answer[]

  @@map("quizzes")
}

model Answer {
  id          String  @id @default(cuid())
  quizId      String  @map("quiz_id")
  title       String
  correct     Boolean
  explanation String  @db.Text

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model CodeExercise {
  id             String   @id @default(cuid())
  lessonId       String   @map("lesson_id")
  title          String
  description    String   @db.Text
  position       Int
  codeTemplate   String   @map("code_template") @db.Text
  expectedOutput String   @map("expected_output") @db.Text
  hint           String?  @db.Text
  createdAt      DateTime @default(now())

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("code_excercises")
}

model Theory {
  id       String  @id @default(cuid())
  lessonId String  @map("lesson_id")
  title    String
  content  String  @db.Text
  code     String? @db.Text
  position Int

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("theories")
}
